rm(list = ls())
setwd("C:/Users/tomfr/OneDrive/Studium/UNI/5. Semester/Data Sience/Prüfung")
library(tidyverse)
library(ggplot2)
library(tidyr)
library(reshape2)
# Read the data from csv with the ";" as separator
data <- read.csv("./open-data_berlin_Nutzerdaten.csv", sep = ";")
str(data)
# View(data)
# After looking into the data:
# 1. The Names of the pages with ä,ö,ü,ß are escaped --> First step is to remove the escape
# 2. Every Month has two columns: pi (Page impressions), v (Page Visits)
# 3. Many NA's
####### REMOVE ESCAPED LETTERS START #######
# Next: Start with 1. step and remove escaped letters
# - √º = ü
# - √∂ = ö
# - √§ = ä
# - √ü = ß
# ü <- data[grep('√º', data$page), ]
# ö <- data[grep('√∂', data$page), ]
# ä <- data[grep('√§', data$page), ]
ü <- grep('√º', data$page)
ö <- grep('√∂', data$page)
ä <- grep('√§', data$page)
# Search for 'Straße' --> √ü = ß
# View(data[grep('stra', data$page), ])
ß <- grep('√ü', data$page)
# Thesis: Every escaped char starts with '√'. Search for not found escaped chars:
# escaped <- data[grep('√', data$page)]
escaped <- grep('√', data$page)
others <- setdiff(setdiff(setdiff(setdiff(escaped, ß), ü), ö), ä)
# View(data[others, ])
# There exist more:
# √É≈∏ = ß
# √É∆í√Ü‚Äô√É‚Ä¶√Ç¬∏ = ß
# Ö:
# √É¬∂ = ö
# √É∆í√Ü‚Äô√É‚Ä†√¢‚Ç¨‚Ñ¢√É∆í√¢‚Ç¨ √É¬¢√¢‚Äö¬¨√¢‚Äû¬¢√É∆í√Ü‚Äô√É¬¢√¢‚Äö¬¨√Ö¬°√É∆í√¢‚Ç¨≈°√É‚Äö√Ç¬∂ = ö
# √É∆í√Ü‚Äô√É‚Äö√Ç¬∂ = ö
# Ü:
# √É¬º = ü
# √É∆í√Ü‚Äô√É‚Ä†√¢‚Ç¨‚Ñ¢√É∆í√¢‚Ç¨ √É¬¢√¢‚Äö¬¨√¢‚Äû¬¢√É∆í√Ü‚Äô√É¬¢√¢‚Äö¬¨√Ö¬°√É∆í√¢‚Ç¨≈°√É‚Äö√Ç¬º = ü
# √É∆í√Ü‚Äô√É‚Ä†√¢‚Ç¨‚Ñ¢√É∆í√¢‚Ç¨≈°√É‚Äö√Ç¬º = ü
# √É∆í√Ü‚Äô√É‚Äö√Ç¬º = ü
# √É¬É¬º = ü
# Ä:
# √É¬§A4 = ä
# √É∆í√Ü‚Äô√É‚Äö√Ç¬§ = ä
# √É¬§ = ä
# √É∆í√Ç¬§ = ä
others <- setdiff(others, grep('√É≈∏', data$page))
others <- setdiff(others, grep('√É∆í√Ü‚Äô√É‚Ä†√¢‚Ç¨‚Ñ¢√É∆í√¢‚Ç¨ √É¬¢√¢‚Äö¬¨√¢‚Äû¬¢√É∆í√Ü‚Äô√É¬¢√¢‚Äö¬¨√Ö¬°√É∆í√¢‚Ç¨≈°√É‚Äö√Ç¬', data$page))
others <- setdiff(others, grep('√É¬∂', data$page))
others <- setdiff(others, grep('√É∆í√Ü‚Äô√É‚Äö√Ç¬∂', data$page))
others <- setdiff(others, grep('√É¬º', data$page))
others <- setdiff(others, grep('√É∆í√Ü‚Äô√É‚Äö√Ç¬º', data$page))
others <- setdiff(others, grep('√É¬§A4', data$page))
others <- setdiff(others, grep('√É∆í√Ü‚Äô√É‚Äö√Ç¬§', data$page))
others <- setdiff(others, grep('√É¬§', data$page))
others <- setdiff(others, grep('√É∆í√Ç¬§', data$page))
others <- setdiff(others, grep('√É∆í√Ü‚Äô√É‚Ä†√¢‚Ç¨‚Ñ¢√É∆í√¢‚Ç¨≈°√É‚Äö√Ç¬º', data$page))
others <- setdiff(others, grep('√É¬É¬º', data$page))
# View(data[others,])
# Thesis is a pattern for the most escaped letters:
# - √(something)º = ü Problem:
#                     √É∆í√Ü‚Äô√É‚Ä†√¢‚Ç¨‚Ñ¢√É∆í√¢‚Ç¨≈°√É‚Äö√Ç¬º because 2 times °
#                     √É∆í√Ü‚Äô√É‚Ä†√¢‚Ç¨‚Ñ¢√É∆í√¢‚Ç¨ √É¬¢√¢‚Äö¬¨√¢‚Äû¬¢√É∆í√Ü‚Äô√É¬¢√¢‚Äö¬¨√Ö¬°√É∆í√¢‚Ç¨≈°√É‚Äö√Ç¬º
#                     Solution: ° is different to º and º only one time at the end!
# - %C3%BC = ü
# - √(something)∂ = ö Problem: none
# - %C3%B6 = ö
# - √(something)§ = ä Problem: √É¬§A4 and because one more letter
# - %C3%A4 = ä
# - A4 = ä
# - "¬® " = ä
# - √(something)ü or √(something)∏ = ß Problem: should be parsed before ü because it uses ü
# - %C3%9F = ß
#
# Replace letters:
temp <- data[others, "page"]
data[ß, "page"]
data_sub <- data
data_sub$page <- gsub("(√[^A-Za-z]*?[ü∏])|%C3%9F", "ß", data_sub$page) # ß
data_sub$page <- gsub("(√[^A-Za-z]*?º)|%C3%BC", "ü", data_sub$page) # ü
data_sub$page <- gsub("(√[^A-Za-z]*?∂)|%C3%B6", "ö", data_sub$page) # ö
data_sub$page <- gsub("(√[^A-Za-z]*?§(A4)?)|(A4)|¬® ", "ä", data_sub$page) # ä
# View(data_sub)
# Unsolved Problem: ¬ is sometimes in the data but don't know what it does
####### REMOVE ESCAPED LETTERS END #######
####### FIND DUPLICATES START #######
# Find the duplicates
data_dup <- data_sub[(duplicated(data_sub$page) | duplicated(data_sub$page, fromLast = T)),]
# Sum the amount of visits and replace the 0's with NA
data_agg <- aggregate(x = data_sub[ , colnames(data_sub) != "page"],             # Mean by group
by = list(data_sub$page),
FUN = sum,
na.rm = TRUE
)
colnames(data_agg)[colnames(data_agg) == 'Group.1'] <- 'page'
data_agg[data_agg == 0] <- NA
####### FIND DUPLICATES END #######
####### PREPARE SUMS START#######
data_enr <- data_agg
# Add the sum of visits | sum of impressions
month_cols_pi <- names(data_enr)[grep("X[0-9]*[.][0-9][0-9][.]pi", names(data_enr))]
month_cols_v <- names(data_enr)[grep("X[0-9]*[.][0-9][0-9][.]v", names(data_enr))]
# Calculate the sums
sum_pi <- apply(data_enr[,month_cols_pi], c(1), function(x) {sum(x, na.rm = T)})
sum_v <- apply(data_enr[,month_cols_v], c(1), function(x) {sum(x, na.rm = T)})
sum <- sum_pi + sum_v
data_enr['sum_pi'] <- sum_pi
data_enr['sum_v'] <- sum_v
data_enr['sum'] <- sum
# View(data_enr[,c('page','sum_v', 'sum_pi')])
####### PREPARE SUMS END #######
####### TASK A) 10 most used pages ALTRNATIVE START#######
# Function for chart
fun_bar_chart <- function(data_enr_temp, number_to_display, decreasing = T) {
# Order by sum of visits and page impressions
data_enr_temp <- data_enr_temp[order(data_enr_temp$sum, decreasing = decreasing), ]
# Get the 10 highest/lowest per class
top10 <- data_enr_temp[which(data_enr_temp$page %in% head(data_enr_temp, number_to_display)$page),]
top10 <- top10[order(top10$sum, decreasing = T), ]
# Make two fields for every variable of each page
melted <- melt(top10[,c("page", "sum_v", "sum_pi")], id="page")
# melted <- melted[order(-melted$variable, -melted$value, decreasing = F), ]
# Make a factor to order the data
melted$page <- factor(melted$page, levels = unique(melted$page),ordered = T)
# Define Title
title <- ""
if(decreasing) {
title <- paste("Sum of page impressions and visits of the", number_to_display ,"most visited pages", sep = " ")
} else {
title <- paste("Sum of page impressions and visits of the", number_to_display ,"least visited pages", sep = " ")
}
# Make plot
plot <- ggplot(melted, aes(value, page, fill = variable, label=value)) +
geom_col() +
geom_text( size = 3, position = position_stack( vjust = 0.5 ) ) +
ggtitle(title) +
ylab("Sum") + xlab("Page") +
scale_fill_discrete(labels=c('Visits', 'Page impressions')) +
labs(fill='') +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5, size=18), axis.title=element_text(size=14,face="bold"))
return(plot)
}
p1 <- fun_bar_chart(data_enr, 10, T)
p1
####### TASK A) 10 most used pages END#######
####### TASK B) 10 least used pages START#######
# Use the function of a)
p2 <- fun_bar_chart(data_enr, 10, F)
p2
# View(melted)
####### TASK B) 10 least used pages END#######
####### TASK D)  impressions ~ visits#######
# Test if there are in one data set more impressions than visits
sum(data_enr$sum_pi < data_enr$sum_v) # 0
# Test how many pages have the same amount of impressions and visits
sum(data_enr$sum_pi == data_enr$sum_v) # 2147
# Look for a relation ship
p3 <- ggplot(data_enr, aes(sum_v, sum_pi)) +
geom_point() +
geom_smooth(method = 'loess', formula = "y ~ x") +
labs(title = "Relationship between impressions and visits") +
xlab("Sum of visits by page") + ylab("Sum of page impressions by page")
p3
# Answer: There are always more or equal impressions than visits. That means
# every visit is a impression, but a visit can have multiple impressions. Looking
# at the relationship, we can see that more visits result in more impressions.
####### TASK D) visits ~ impressions#######
####### TASK E)  Started pages#######
# From TASK D) we know that every page with at least one impression have one visit.
# So we can filter through the first date
start_pages <- data_enr[!(is.na(data_enr$X2019.02.v)), "page"]
start_pages
# Answer: The in start_pages listed pages are start pages.
####### TASK E) visits ~ impressions#######
###### SOLUTIONS #####
# Solution of a)
p1
# Answer: The most used pages have all more impressions than views. The most
# used page was "covid-19-berlin-verteilung-den-bezirken-gesamtübersicht". Additionally,
# there were three more covid-19 pages in the top 10. I think this is because the
# pandemic situation had much publicity in the last years. Other data sets which are used more often,
# were the "liste-der-häufigen-vornamen". The lists of the years 2018 to 2020 are in the top 10.
# What are page visits and page impression? A page visit is counted, if a person loads the page.
# Solution of b)
p2
# Answer: It's difficult to provide information of the 10 least used ...
# Solution of c)
# Please start the shiny app
# Solution of d)
p3 # and Answer: There are always more or equal impressions than visits. That means
# every visit is a impression, but a visit can have multiple impressions. Looking
# at the relationship, we can see that more visits result in more impressions.
# Solution of e)
start_pages
###### SOLUTIONS #####
# Solution of a)
p1
shiny::runApp('open-data-berlin-shiny')
runApp('open-data-berlin-monythly')
